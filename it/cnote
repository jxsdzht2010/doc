    strcpy
    《C程序设计语言》一书中讲述了strcpy这个函数的实现，共给出了4个实现方式，各有不同，精益求精。
    1.采用数组方式
    void strcpy(char *s, char *t) {
        int i;
    
        i = 0;
        while ((s[i] = t[i]) != '\0')
            i++;
    }

    2.采用指针方式
    void strcpy(char *s, char *t) {
        while ((*s = *t) != '\0') {
            s++;
            t++;
        }
    }

    3.有经验的程序员的风格
    void strcpy(char *s, char *t) {
        while ((*s++ = *t++) != '\0')
            ;
    }

    4.进一步简化
    void strcpy(char *s, char *t) {
        while (*s++ = *t++)
            ;
    }

    仔细分析一下这四种风格：
    第一种引入了局部变量i，采用数组的方式，又引入了[]运算符。
    第二种写法采用指针写法，在循环体中维护两个指针的增量，变量s,t在循环条件判断语句和循环体中各出现一次。
    第三种写法将s，t的增量维护放到循环语句之中，简化变量出现次数。
    第四中将'\0'省略，因为false与'\0'是等价的，代码量更少。
    
    *s++这种风格是C语言的常见写法，要精通这种写法。
    四种风格实现功能完全一样，仔细分析之后，发现聊聊几行代码背后也能体现“代码的实现者”对语言理解的深度。

    **同样结构的copy逻辑还存在memcpy中，不过memcpy函数的实现有对“内存覆盖”进行检测，在strcpy中却不需要检测“内存覆盖”问题，值得深究。

    对多条字符串按词典法排序
    有指针数组：
    char *words[] = {"ccc", "bbb", "ddd", "aaa"};
    将其排序成      {"aaa", "bbb", "ccc", "ddd"};
    这里会用到C语言中内置的qsort，我们只需要写好compare函数即可。
    int compare(const void * a, const void * b) {
        return strcmp(*(char**)a, *(char**)b);
    }
    之后调用qsort:
    qsort(words, sizeof(words)/sizeof(words[0]), sizeof(char*), compare);
    
    注意compare中的指针转换 *(char**) 这个方式 不等于 (char*)，初学者一般会认为 char前后星号可以抵消，实际上*(char**)a 的意义是：将a转换成char**的形式，再取其指向的值。而(char*)a的意义是将a转换成(char*)的形式。
    虽然两种取法得到的结果类型是一样的，都是char*。但是第一个取得的是a指向的内容，而第二个是a本身的内容。
